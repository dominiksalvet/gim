#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2018-2019 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/gim
#-------------------------------------------------------------------------------
# PARAMETERS:
#   $1 - source directory path
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# GLOBAL DIRECTIVES
#-------------------------------------------------------------------------------
# shellcheck disable=1090
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# a list of required software
readonly SW_REQUIRED='command echo [ id : sed git rm'

# check if any piece of software is missing
for sw in $SW_REQUIRED; do
    if ! command -v -- "$sw" > /dev/null; then
        echo "$0: missing $sw software" >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# CHECK ARGUMENTS
#-------------------------------------------------------------------------------

# check if the source directory argument is correct
if [ ! "$1" ] || [ ! -d "$1"/ ]; then
    echo "$0: first argument must be the path of an existing directory" >&2
    exit 1
fi

# verify that required environment variables were provided
: "${GLOBAL_CFG_DIR:?}"
: "${LOCAL_CFG_DIR:?}"

#-------------------------------------------------------------------------------
# LOADING VARIABLES
#-------------------------------------------------------------------------------

# check installation type
if [ ! "$INSTALL_TYPE" ]; then
    if [ "$(id -u)" -eq 0 ]; then
        INSTALL_TYPE=global
    else
        INSTALL_TYPE=local
    fi
fi

# load configuration from RC files
if [ "$INSTALL_TYPE" = global ]; then
    . "$1"/rc/global && # use delivered global RC file
    if [ -r "$GLOBAL_CFG_DIR"/gimrc ]; then
        . "$GLOBAL_CFG_DIR"/gimrc # custom user-defined RC file
    fi
else
    . "$1"/rc/local && # use delivered local RC file
    if [ -r "$LOCAL_CFG_DIR"/gimrc ]; then
        . "$LOCAL_CFG_DIR"/gimrc # custom user-defined RC file
    fi
fi || exit

#-------------------------------------------------------------------------------
# GIM_DB_DIR checks
#-------------------------------------------------------------------------------

# the file representing a database of locally installed projects
readonly GIM_STATUS_PATH="${GIM_DB_DIR:?}"/status

if [ -e "$GIM_STATUS_PATH" ] && [ ! -w "$GIM_STATUS_PATH" ]; then
    echo "$0: can't write to $GIM_STATUS_PATH" >&2
    exit 1
fi

#-------------------------------------------------------------------------------
# GIM_BIN_DIR checks
#-------------------------------------------------------------------------------

# verify that the gim binary path variable is set
: "${GIM_BIN_DIR:?}"

if [ -e "$GIM_BIN_DIR"/ ] && [ ! -w "$GIM_BIN_DIR"/ ]; then
    echo "$0: can't write to $GIM_BIN_DIR" >&2
    exit 1
fi

#-------------------------------------------------------------------------------
# UNINSTALLATION
#-------------------------------------------------------------------------------

# remove program files
rm -f "$GIM_BIN_DIR"/gim &&

# remove default gimrc files
if [ "$INSTALL_TYPE" = global ]; then
    rm -f "$GLOBAL_CFG_DIR"/gimrc-local &&
    rm -f "$GLOBAL_CFG_DIR"/gimrc-global
else
    rm -f "$LOCAL_CFG_DIR"/gimrc-local
fi &&

# remove TAB completion
if [ "$INSTALL_TYPE" = global ]; then
    rm -f /etc/bash_completion.d/gim-completion
else
    rm -f "$HOME"/.bash_completion.d/gim-completion
fi &&

# if INSTALLER is not gim, it is required to modify gim status file manually
if [ "$INSTALLER" != gim ]; then
    if [ -e "$GIM_STATUS_PATH" ]; then
        # get short hash of the current git commit
        readonly COMMIT_SHORT_HASH="$(git rev-parse --short HEAD)" &&
        # use tag name pointing to the commit as gim version if any
        commit_gim_version="$(git tag -l --points-at "$COMMIT_SHORT_HASH")" &&
        # if no tags found, use short commit hash as gim version
        commit_gim_version="${commit_gim_version:-"$COMMIT_SHORT_HASH"}" &&
        sed -i -E -e '\|'"gitlab.com/dominiksalvet/gim $commit_gim_version"'|d' "$GIM_STATUS_PATH"
    else
        echo > "$GIM_STATUS_PATH"
    fi
fi || exit
