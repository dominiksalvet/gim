#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/gim
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ git make cd mkdir sed grep rm ls rmdir'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software $i is missing.
POSSIBLE SOLUTIONS:
  * Install $i using an installed package manager." >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=2.0.0

GIT_URL_FORMAT='https://<hostname>/<author>/<project>[.git]'

HELP_MESSAGE="USAGE: $0 [OPTION]... ACTION GIT_URL [MAKE_ARG]...

ACTION:
  install    install a Git project in the latest version
  update     update a Git project to the latest version
  uninstall  uninstall a Git project

GIT_URL:
  $GIT_URL_FORMAT

OPTION:
  -autoclean  remove old cached Git repositories and exit
  -clean      remove all cached Git repositories and exit
  -help       show this help and exit
  -about      show information and exit
  -version    show version and exit

MAKE_ARG:
  Arguments for all make commands of a selected action in format <VAR>=<value>."

ABOUT_MESSAGE="gim $VERSION
Install, update or uninstall Git projects in an easy way with a single command.

Copy"'right 2018 Dominik Salvet
SPDX License Identifier: MIT
https://gitlab.com/dominiksalvet/gim'

HINT_MESSAGE="POSSIBLE SOLUTIONS:
  * Use the '$0 -help' command for getting help."

# cache directory to store downloaded Git repositories
CACHE_DIR=/etc/gim/cache

# DESCRIPTION:
#   Check if running as root.
root_check() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$0: Please run as root." >&2
        return 1
    fi
}

# DESCRIPTION:
#   Obtain the Git repository in the most recent state. Also fill the
#   '$project_latest_version' variable with the latest version of the project.
# PARAMETERS:
#   $1 - Git project URL
#   $2 - Git project author
#   $3 - Git project name
obtain_repository() {
    # check if running as root
    root_check || return
    
    # create a cache directory for the project
    mkdir -p "$CACHE_DIR/$2/$3/" &&
    cd "$CACHE_DIR/$2/$3/" || {
        echo "$0: Can't access gim's cache directory.
POSSIBLE SOLUTIONS:
  * Free up some storage space.
  * Contact a gim developer." >&2
        return 1
    }
    
    if [ -z "$(ls -A)" ]; then # if the cache directory for the target project is empty
        git clone -q --progress "$1" . # clone the Git repository to the this directory
    elif git diff --quiet; then # check if the Git directory doesn't contain any changes
        git checkout -q master && # checkout the master branch for the following commands
        git pull -q --progress && # get the most recent state of the repository
        git fetch -q --progress --tags # get the most recent state of the repository tags
    else
        echo "$0: Cached $3 Git repository is corrupted.
POSSIBLE SOLUTIONS:
  * Remove the cache using the '$0 -clean' command." >&2
        return 1
    fi || {
        echo "$0: Can't obtain $3 repository in the most recent state.
POSSIBLE SOLUTIONS:
  * Make sure that $3 repository exists on the given Git URL.
  * Connect your device to the Internet.
  * Remove the cache using the '$0 -clean' command.
  * Free up some storage space." >&2
        return 1
    }
    
    # get version of the most recent annotated tag of the obtained Git project
    project_latest_version="$(git describe --abbrev=0)" || {
        echo "$0: Repository $3 has no annotated tag.
POSSIBLE SOLUTIONS:
  * Contact a $3 developer about gim compliance." >&2
        return 1
    }
}

# DESCRIPTION:
#   Fill the '$project_local_version' variable with the current version of a given project.
# PARAMETERS:
#   $1 - project name
fill_project_local_version() {
    # get the current version of the program
    if ! project_local_version="$("$1" --version)" 2>/dev/null; then
        project_local_version="$("$1" -version)" 2>/dev/null
    fi || project_local_version=

    # check if non-empty version was returned
    if [ -z "$project_local_version" ]; then
        echo "$0: Neither the '--version' flag nor the '-version' flag is supported.
POSSIBLE SOLUTIONS:
  * Contact a $project_name developer about gim compliance."
        return 1
    fi
}

# DESCRIPTION:
#   Perform a make target call with given arguments.
# PARAMETERS:
#   $1 - make target
#   $2 - make arguments
make_call() {
    if [ -z "$2" ]; then
        make "$1"
    else
        make "$1" "$2"
    fi
}

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

action=
project_url=
make_args=
# processing each parameter separately
for i in "$@"; do
    if [ ! -z "$action" ]; then # if the action has been selected
        if [ -z "$project_url" ]; then # if the project Git URL is not set
            project_url="$i" # next up are only make arguments
        # accept only make arguments
        elif [ -z "$make_args" ]; then
            make_args="$i"
        else
            make_args="$make_args $i"
        fi
    else
        case "$i" in
            install)
                action=install
                ;;
            update)
                action=update
                ;;
            uninstall)
                action=uninstall
                ;;
            -autoclean)
                # check if running as root
                root_check || exit
                # go through all cached projects Git repositories
                for j in "${CACHE_DIR:?}/"*/*; do
                    # expecting a Git repository, so check if it is a directory
                    if [ -d "$j" ]; then
                        # get project name from the path
                        project_name="$(echo "$j" | sed -E -e 's|.*/||')"
                        # if not installed
                        if [ ! -x "$(command -v "$project_name")" ]; then
                            # remove the project's cached Git repository
                            rm -rf "${j:?}/"
                        fi
                    fi
                done
                # remove author directories if they are empty
                for j in "${CACHE_DIR:?}/"*; do
                    rmdir --ignore-fail-on-non-empty "$j/"
                done
                exit 0
                ;;
            -clean)
                # check if running as root
                root_check || exit
                rm -rf "${CACHE_DIR:?}/"*
                exit 0
                ;;
            -help)
                echo "$HELP_MESSAGE"
                exit 0
                ;;
            -about)
                echo "$ABOUT_MESSAGE"
                exit 0
                ;;
            -version)
                echo "$VERSION"
                exit 0
                ;;
            *)
                echo "$0: The option '$i' was not recognized.
$HINT_MESSAGE" >&2
                exit 1
                ;;
        esac
    fi
done

# check arguments if valid and parse required information
if [ -z "$action" ]; then # check if argument with an action provided
    echo "$0: No argument with action provided.
$HINT_MESSAGE" >&2
    exit 1
fi

# check if argument with Git URL provided
if [ -z "$project_url" ]; then
    echo "$0: No argument with Git URL provided.
$HINT_MESSAGE" >&2
    exit 1
fi

# check the format of given Git URL
if ! echo "$project_url" | grep -q -E -e '^https://[^/]+(/[^\.][^/]*){2}(|\.git)$'; then
    echo "$0: Supplied Git URL is not valid.
$HINT_MESSAGE" >&2
    exit 1
fi

# if the Git URL doesn't end with '.git'
if ! echo "$project_url" | grep -q -E -e '\.git$'; then
    # append '.git'
    project_url="${project_url}.git"
fi

# get the project author and the project name from the given Git URL
project_author="$(echo "$project_url" | sed -E -e 's|/[^/]*$||; s|.*/||')"
project_name="$(echo "$project_url" | sed -E -e 's/.git$//; s|.*/||')"

#-------------------------------------------------------------------------------
# EXECUTE SELECTED ACTION
#-------------------------------------------------------------------------------

case "$action" in
    install)
        obtain_repository "$project_url" "$project_author" "$project_name" || exit
        if [ -x "$(command -v "$project_name")" ]; then # check if the project already installed
            fill_project_local_version "$project_name" || exit
            if [ "$project_local_version" = "$project_latest_version" ]; then # if the versions are the same
                echo "$project_name is already installed and updated ($project_local_version).
SUCCESS"
                exit 0
            else
                echo "$0: $project_name is already installed ($project_local_version) but not updated ($project_latest_version).
POSSIBLE SOLUTIONS:
  * Use the 'update' action instead of the used 'install' action." >&2
                exit 1
            fi
        fi

        git checkout -q "$project_latest_version" && # use the latest repository tag
        make_call install "$make_args" # install the program
        ;;
    update)
        if [ -x "$(command -v "$project_name")" ]; then # check if the project installed
            obtain_repository "$project_url" "$project_author" "$project_name" || exit
            fill_project_local_version "$project_name" || exit

            if [ "$project_local_version" = "$project_latest_version" ]; then # if the versions are the same
                echo "$project_name is already installed and updated ($project_local_version).
SUCCESS"
                exit 0
            fi
        else # the project is not installed
            echo "$0: $project_name is not installed.
POSSIBLE SOLUTIONS:
  * Use the 'install' action instead of the used 'update' action." >&2
            exit 1
        fi

        obtain_repository "$project_url" "$project_author" "$project_name" || exit
        fill_project_local_version "$project_name" || exit

        git checkout -q "$project_local_version" && # use the program version as a tag
        make_call uninstall "$make_args" && # uninstall the program

        git checkout -q "$project_latest_version" && # use the latest repository tag
        make_call install "$make_args" # install the program again
        ;;
    uninstall)
        if [ ! -x "$(command -v "$project_name")" ]; then # if the project is not installed
            echo "$project_name is not installed.
SUCCESS"
            exit 0 # uninstallation exits with a success eventually
        fi
        
        obtain_repository "$project_url" "$project_author" "$project_name" || exit
        fill_project_local_version "$project_name" || exit

        git checkout -q "$project_local_version" && # use the program version as a tag
        make_call uninstall "$make_args" # uninstall the program
        ;;
esac || {
    echo "$0: An error has occurred during the $action action.
POSSIBLE SOLUTIONS:
  * Read the report above as it can provide required information.
  * Contact a $project_name developer." >&2
    exit 1
}

#-------------------------------------------------------------------------------
# VERIFY THE PROJECT'S STATUS
#-------------------------------------------------------------------------------

case "$action" in
    install | update)
        if [ ! -x "$(command -v "$project_name")" ]; then # if the project is not installed (as it should be now)
            echo "$0: $project_name should have been installed, but it is not.
POSSIBLE SOLUTIONS:
  * Contact a $project_name developer." >&2
            exit 1
        fi
        ;;
    uninstall)
        if [ -x "$(command -v "$project_name")" ]; then # if the project is installed (as it shouldn't be now)
            echo "$0: $project_name should have been uninstalled, but it is not.
POSSIBLE SOLUTIONS:
  * Contact a $project_name developer." >&2
            exit 1
        fi
        ;;
esac

echo 'SUCCESS'
