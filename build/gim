#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/gim
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ git make cd mkdir sed grep rm ls rmdir head id logname cp'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software $i is missing.
POSSIBLE SOLUTIONS:
  * Install $i using an installed package manager." >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=3.1.2

URL_FORMAT='https://<hostname>/<author>/<project>[.git]'

HELP_MESSAGE="USAGE: $0 [OPTION]... ACTION URL [MAKE_ARG]...

ACTION:
  install    install a Git project in the latest version
  update     update a Git project to the latest version
  uninstall  uninstall a Git project

URL:
  $URL_FORMAT

OPTION:
  -autoclean  remove old cached Git repositories and exit
  -clean      remove all cached Git repositories and exit
  -help       show this help and exit
  -about      show information and exit
  -version    show version and exit

MAKE_ARG:
  Arguments for all make commands of a selected action in format <VAR>=<value>."

ABOUT_MESSAGE="gim $VERSION
Install, update or uninstall Git projects in an easy way with a single command.

Copy"'right 2018 Dominik Salvet
SPDX License Identifier: MIT
https://gitlab.com/dominiksalvet/gim'

HINT_MESSAGE="POSSIBLE SOLUTIONS:
  * Use the '$0 -help' command for getting help."

# cache directory to store downloaded Git repositories
CACHE_DIR=/etc/gim/cache

# DESCRIPTION:
#   Check if running as root.
root_check() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$0: Please run as root." >&2
        return 1
    fi
}

# DESCRIPTION:
#   Returns all names of a gim compliant project contained in a given Git
#   repository as a directory path.
# PARAMETETRS:
#   $1 - project repository directory
get_repository_project_names() {
    if [ ! -r "$1/gim/names" ]; then
        echo "$1" | sed -E -e 's|/*$||; s|^.*/||'
    else
        head -n 1 "$1/gim/names"
    fi
}

# DESCRIPTION:
#   Returns name of locally installed project based on given repository project
#   names if found.
# PARAMETETRS:
#   $1 - repository project names
get_local_project_name() {
    for LOCAL_name in $1; do
        if [ -x "$(command -v "$LOCAL_name")" ]; then
            echo "$LOCAL_name"
            break
        fi
    done
}

# DESCRIPTION:
#   Returns the current version of a locally installed given project.
# PARAMETERS:
#   $1 - local project name
get_local_project_version() {
    # get the current version of the project
    if ! LOCAL_version="$("$1" --version)" 2>/dev/null; then
        LOCAL_version="$("$1" -version)" 2>/dev/null
    fi || LOCAL_version=
    echo "$LOCAL_version"
}

# DESCRIPTION:
#   Perform a make target call with given arguments.
# PARAMETERS:
#   $1 - make target
#   $2 - make arguments
make_call() {
    if [ -z "$2" ]; then
        make "$1"
    else
        make "$1" "$2"
    fi
}

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

action=
repository_url=
make_args=
# processing each parameter separately
for i in "$@"; do
    if [ ! -z "$action" ]; then # if the action has been selected
        if [ -z "$repository_url" ]; then # if the project repository URL is not set
            repository_url="$i" # next up are only make arguments
        # accept only make arguments
        elif [ -z "$make_args" ]; then
            make_args="$i"
        else
            make_args="$make_args $i"
        fi
    else
        case "$i" in
            install)
                action=install
                ;;
            update)
                action=update
                ;;
            uninstall)
                action=uninstall
                ;;
            -autoclean)
                # check if running as root
                root_check || exit
                # go through all cached projects Git repositories
                for j in "${CACHE_DIR:?}/"*/*; do
                    # expecting a Git repository, so check if it is a directory
                    if [ -d "$j" ]; then
                        # check if the project not installed
                        if [ -z "$(get_local_project_name "$(get_repository_project_names "$j")")" ]; then
                            # remove the project's cached Git repository
                            rm -r -f "${j:?}/"
                        fi
                    fi
                done
                # remove author directories if they are empty
                for j in "${CACHE_DIR:?}/"*; do
                    rmdir --ignore-fail-on-non-empty "$j/"
                done
                exit 0
                ;;
            -clean)
                # check if running as root
                root_check || exit
                rm -r -f "${CACHE_DIR:?}/"*
                exit 0
                ;;
            -help)
                echo "$HELP_MESSAGE"
                exit 0
                ;;
            -about)
                echo "$ABOUT_MESSAGE"
                exit 0
                ;;
            -version)
                echo "$VERSION"
                exit 0
                ;;
            *)
                echo "$0: The option '$i' was not recognized.
$HINT_MESSAGE" >&2
                exit 1
                ;;
        esac
    fi
done

# check arguments if valid and parse required information
if [ -z "$action" ]; then # check if argument with an action provided
    echo "$0: No argument with action provided.
$HINT_MESSAGE" >&2
    exit 1
fi

# check if argument with repository URL provided
if [ -z "$repository_url" ]; then
    echo "$0: No argument with repository URL provided.
$HINT_MESSAGE" >&2
    exit 1
fi

# check the format of given repository URL
if ! echo "$repository_url" | grep -q -E -e '^https://[^/]+(/[^\.][^/]*){2}(|\.git)$'; then
    echo "$0: Supplied repository URL is not valid.
$HINT_MESSAGE" >&2
    exit 1
fi

# if the repository URL doesn't end with '.git'
if ! echo "$repository_url" | grep -q -E -e '\.git$'; then
    # append '.git'
    repository_url="${repository_url}.git"
fi

#-------------------------------------------------------------------------------
# OBTAINING THE REPOSITORY
#-------------------------------------------------------------------------------

# check if running as root
root_check || exit

# extract required information from the given repository URL
repository_author="$(echo "$repository_url" | sed -E -e 's|/[^/]*$||; s|.*/||')"
repository_name="$(echo "$repository_url" | sed -E -e 's/.git$//; s|.*/||')"
repository_dir="$CACHE_DIR/$repository_author/$repository_name"

# create a cache directory for the project
mkdir -p "$repository_dir/" &&
cd "$repository_dir/" || {
    echo "$0: Can't access gim's cache directory.
POSSIBLE SOLUTIONS:
  * Free up some storage space.
  * Contact a gim developer." >&2
    exit 1
}

if [ -z "$(ls -A)" ]; then # if the cache directory for the target project is empty
    git clone -q --progress "$repository_url" . # clone the Git repository to the this directory
elif [ -z "$(git status --porcelain)" ]; then # check if the Git directory doesn't contain any changes
    git checkout -q master && # checkout the master branch for the following commands
    git pull -q --progress && # get the most recent state of the repository
    git fetch -q --progress --tags # get the most recent state of the repository tags
else
    echo "$0: Cached $repository_name repository is corrupted.
POSSIBLE SOLUTIONS:
  * Remove the cache using the 'sudo $0 -clean' command." >&2
    exit 1
fi || {
    echo "$0: Can't obtain $repository_name repository in the most recent state.
POSSIBLE SOLUTIONS:
  * Make sure that $repository_name repository exists on the given URL.
  * Connect your device to the Internet.
  * Remove the cache using the 'sudo $0 -clean' command.
  * Free up some storage space." >&2
    exit 1
}

# get version of the most recent annotated tag of the obtained Git project
repository_project_version="$(git describe --abbrev=0)" || {
    echo "$0: Repository $repository_name has no annotated tag.
POSSIBLE SOLUTIONS:
  * Contact a $repository_name repository developer about gim compliance." >&2
    exit 1
}

#-------------------------------------------------------------------------------
# EXECUTE SELECTED ACTION
#-------------------------------------------------------------------------------

# get information about the local project (if installed)
local_project_name="$(get_local_project_name "$(get_repository_project_names "$repository_dir/")")"
local_project_version="$(get_local_project_version "$local_project_name")"

case "$action" in
    install)
        if [ ! -z "$local_project_name" ]; then # check if the project already installed
            if [ "$local_project_version" = "$repository_project_version" ]; then # if the versions are the same
                echo "$local_project_name is already installed and updated ($local_project_version)."
                exit 0
            elif [ -z "$local_project_version" ]; then # if not and version flags not supported
                echo "$0: $local_project_name is already installed but no version information was provided.
POSSIBLE SOLUTIONS:
  * Contact a $local_project_name developer about gim compliance." >&2
                exit 1
            else
                echo "$0: $local_project_name is already installed ($local_project_version) but not updated ($repository_project_version).
POSSIBLE SOLUTIONS:
  * Use the 'update' action instead of the used 'install' action." >&2
                exit 1
            fi
        fi

        git checkout -q "$repository_project_version" && # use the latest repository tag
        make_call install "$make_args" # install the program
        ;;
    update)
        if [ ! -z "$local_project_name" ]; then # check if the project installed
            if [ "$local_project_version" = "$repository_project_version" ]; then # if the versions are the same
                echo "$local_project_name is already installed and updated ($local_project_version)."
                exit 0
            elif [ -z "$local_project_version" ]; then # if not and version flags not supported
                echo "$0: $local_project_name is installed but no version information was provided.
POSSIBLE SOLUTIONS:
  * Contact a $local_project_name developer about gim compliance." >&2
                exit 1
            fi
        else # the project is not installed
            echo "$0: Nothing is installed from $repository_name repository.
POSSIBLE SOLUTIONS:
  * Use the 'install' action instead of the used 'update' action." >&2
            exit 1
        fi

        git checkout -q "$local_project_version" && # use the program version as a tag
        make_call uninstall "$make_args" && # uninstall the program

        git checkout -q "$repository_project_version" && # use the latest repository tag
        make_call install "$make_args" # install the program again
        ;;
    uninstall)
        if [ -z "$local_project_name" ]; then # if the project is not installed
            echo "Nothing is installed from $repository_name repository."
            exit 0 # uninstallation exits with a success eventually
        elif [ -z "$local_project_version" ]; then
            echo "$0: $local_project_name is installed but no version information was provided.
POSSIBLE SOLUTIONS:
  * Contact a $local_project_name developer about gim compliance." >&2
            exit 1
        fi

        git checkout -q "$local_project_version" && # use the program version as a tag
        make_call uninstall "$make_args" # uninstall the program
        ;;
esac || {
    echo "$0: An error has occurred during the $action action.
POSSIBLE SOLUTIONS:
  * Read the report above as it can provide required information.
  * Contact a $local_project_name developer." >&2
    exit 1
}

#-------------------------------------------------------------------------------
# VERIFY THE STATUS
#-------------------------------------------------------------------------------

# checkout the master branch for current information about project names from the repository
git checkout -q master

# refresh information about the local project
new_local_project_name="$(get_local_project_name "$(get_repository_project_names "$repository_dir/")")"
new_local_project_version="$(get_local_project_version "$new_local_project_name")"

case "$action" in
    install)
        if [ -z "$new_local_project_name" ]; then # if the project is not installed (as it should be now)
            echo "$0: The project from $repository_name repository should have been installed, but it is not.
POSSIBLE SOLUTIONS:
  * Contact a $repository_name repository developer about gim compliance.
  * Install the project again." >&2
            exit 1
        else
            echo "$new_local_project_name was installed ($new_local_project_version)."
        fi
        ;;
    update)
        if [ -z "$new_local_project_name" ]; then # if the project is not installed (as it should be now)
            echo "$0: The project from $repository_name repository should have been installed, but it is not.
POSSIBLE SOLUTIONS:
  * Contact a $repository_name repository developer about gim compliance.
  * Use the 'install' action instead of the used 'update' action." >&2
            exit 1
        else
            echo "$local_project_name ($local_project_version) was updated to $new_local_project_name ($new_local_project_version)."
        fi
        ;;
    uninstall)
        if [ ! -z "$new_local_project_name" ]; then # if the project is installed (as it shouldn't be now)
            echo "$0: The project from $repository_name repository should have been uninstalled, but it is not.
POSSIBLE SOLUTIONS:
  * Contact a $repository_name repository developer about gim compliance.
  * Uninstall the project again." >&2
            exit 1
        else
            echo "$local_project_name was uninstalled."
        fi
        ;;
esac

#-------------------------------------------------------------------------------
# COPY CONFIGURATION FILES
#-------------------------------------------------------------------------------

# trying to use previously used configuration files
case "$action" in
    install)
        # get all possible project names to look for
        repository_project_names="$(get_repository_project_names "$repository_dir/")"
        # check if there are system-wide configuration files for any of the names
        for i in $repository_project_names; do
            if [ -d "/etc/$i/" ]; then
                # found, last name will be kept in this variable
                previous_local_project_name="$i"
            fi
        done

        # if found any project configuration
        if [ ! -z "$previous_local_project_name" ]; then
            # if there is no system-wide configuration for current project name
            if [ ! -d "/etc/$new_local_project_name/" ]; then
                # copy from the previously uninstalled
                cp -T -a "/etc/$previous_local_project_name/" "/etc/$new_local_project_name/"
            fi &&
            logged_user="$(logname)" && # get logged user name for user-specific configuration
            [ ! -z "$logged_user" ] && # logged user name must not be an empty string
            if [ -d "/home/$logged_user/.config/$previous_local_project_name/" ] && # if there are user configuration files
               [ ! -d "/home/$logged_user/.config/$new_local_project_name/" ]; then # and none of them with current project name
                # copy them from the previously uninstalled
                cp -T -a "/home/$logged_user/.config/$previous_local_project_name/" "/home/$logged_user/.config/$new_local_project_name/"
            fi
        fi
        ;;
    update)
        # if the updated project name is not the same as the one before the update
        if [ "$new_local_project_name" != "$local_project_name" ]; then
            if [ -d "/etc/$local_project_name/" ] && # if there are any configuration files used before the update
               [ ! -d "/etc/$new_local_project_name/" ]; then # and if there is no system-wide configuration for the current project name
                # copy configuration files for the updated project with a new name
                cp -T -a "/etc/$local_project_name/" "/etc/$new_local_project_name/"
            fi &&
            logged_user="$(logname)" && # get logged user name for user-specific configuration
            [ ! -z "$logged_user" ] && # logged user name must not be an empty string
            if [ -d "/home/$logged_user/.config/$local_project_name/" ] && # if there are user configuration files
               [ ! -d "/home/$logged_user/.config/$new_local_project_name/" ]; then # and none of them with current project name
                # copy them for the updated project with a new name
                cp -T -a "/home/$logged_user/.config/$local_project_name/" "/home/$logged_user/.config/$new_local_project_name/"
            fi
        fi
        ;;
esac || {
    echo "$0: Can't use previously used configuration files for $new_local_project_name ($new_local_project_version).
POSSIBLE SOLUTIONS:
  * Uninstall $new_local_project_name, free up some storage space and install it again.
  * Make sure that the 'logname' command works on your system.
  * Contact a gim developer." >&2
}
