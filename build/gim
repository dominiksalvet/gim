#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://gitlab.com/dominiksalvet/gim
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='command echo [ git make cd mkdir sed grep rm'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software '$i' is missing, action canceled." >&2
        # the program dependencies may be missing
        if [ "$i" = hda-verb ]; then
            echo 'POSSIBLE SOLUTIONS:
  * install program dependencies' >&2
        fi
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of the program
VERSION=1.0.0

HELP_MESSAGE="Usage: $0 [OPTION]... ACTION HTTPS_GIT_URL

ACTION:
  install    install a program originating from the given Git URL
  uninstall  uninstall a program originating from the given Git URL
  update     update a program originating from the given Git URL

OPTION:
  -clear-cache  clear cache of downloaded Git project repositories and exit
  -help         show this help and exit
  -about        show information and exit
  -version      show version and exit"

ABOUT_MESSAGE="gim $VERSION
Install, uninstall or update Git projects in an easy way with a single command.

Copy"'right 2018 Dominik Salvet
SPDX License Identifier: MIT
https://gitlab.com/dominiksalvet/gim'

# cache directory to store downloaded Git repositories
CACHE_DIR=~/.cache/gim

#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

# processing each parameter separately
for i in "$@"; do
    if [ ! -z "$action" ]; then # if the action has been selected in the previous variable
        # get Git URL and discard all following parameters
        project_url="$i"
        break
    else
        case "$i" in
            install)
                action=install
                ;;
            uninstall)
                action=uninstall
                ;;
            update)
                action=update
                ;;
            -clear-cache)
                rm -rf "${CACHE_DIR:?}/"
                exit 0
                ;;
            -help)
                echo "$HELP_MESSAGE"
                exit 0
                ;;
            -about)
                echo "$ABOUT_MESSAGE"
                exit 0
                ;;
            -version)
                echo "$VERSION"
                exit 0
                ;;
            *)
                echo "$0: The option '$i' was not recognized.
Try '$0 -help' for more information." >&2
                exit 1
                ;;
        esac
    fi
done

# check arguments if valid and parse required information
if [ -z "$action" ]; then # check if argument with an action provided
    echo "$0: No argument with action provided.
Try '$0 -help' for more information." >&2
    exit 1
elif [ -z "$project_url" ]; then # check if argument with Git URL provided
    echo "$0: No argument with Git URL provided.
Try '$0 -help' for more information." >&2
    exit 1
else # both arguments provided
    # check the format of given Git URL
    if ! echo "$project_url" | grep -q -E -e 'https://[^\.]+\.[^/]+/[^/]+/[^\.]+\.git'; then
        echo "$0: Supplied Git URL is invalid.
POSSIBLE SOLUTIONS:
  * use the 'https://<provider>.<domain>/<author>/<project>.git' template" >&2
        exit 1
    fi

    # get project name and author name from the given Git URL
    project_name="$(echo "$project_url" | sed -E -e 's/.git$//; s|.*/||')"
    project_author="$(echo "$project_url" | sed -E -e 's|/[^/]*$||; s|.*/||')"
fi

#-------------------------------------------------------------------------------
# EXECUTE SELECTED ACTION
#-------------------------------------------------------------------------------

# create a cache directory for the program
mkdir -p "$CACHE_DIR/$project_author/$project_name/"
cd "$CACHE_DIR/$project_author/$project_name/" || exit 1

if [ -d ".git" ]; then # if the repository is in the cache
    git checkout master && # checkout the master branch for the pull command
    git pull && # get the most recent state of the repository
    git fetch --tags # get the most recent state of the repository tags
else # if the repository is not in the cache
    git clone "$project_url" . # clone it to the created cache directory
fi || {
    echo "$0: The Git repository can't be obtained in the most recent state.
POSSIBLE CAUSES:
  * your device is not connected to the Internet" >&2
    exit 1
}

case "$action" in
    install)
        git checkout "$(git describe --abbrev=0)" && # use the latest repository tag
        make install # install the program
        ;;
    uninstall)
        # check if the project is installed
        if ! command -v "$project_name" > /dev/null; then # if not
            echo 'SUCCESS'
            exit 0 # uninstallation returns success eventually
        fi

        git checkout "$("$project_name" -version)" && # use the program version as a tag
        make uninstall # uninstall the program
        ;;
    update)
        # check if the project is installed
        if ! command -v "$project_name" > /dev/null; then # if not
            echo "$0: The project originating from given Git URL is not installed.
POSSIBLE SOLUTIONS:
  * use the 'install' action instead of used 'update' action" >&2
            exit 1
        fi

        # if the versions are the same, it is not required any updates
        if [ "$("$project_name" -version)" = "$(git describe --abbrev=0)" ]; then
            echo 'The latest stable release of this Git project is already installed, update canceled.
SUCCESS'
            exit 0
        fi

        git checkout "$("$project_name" -version)" && # use the program version as a tag
        make uninstall && # uninstall the program

        git checkout "$(git describe --abbrev=0)" && # use the latest repository tag
        make install # install the program again
        ;;
esac || {
    echo "$0: An error has occurred during the '$action' process.
POSSIBLE SOLUTIONS:
  * read the lines above as they can provide required information
  * refer to a developer of the project of the given Git URL" >&2
    exit 1
}

echo 'SUCCESS'
